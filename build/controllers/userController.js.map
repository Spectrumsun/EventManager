{"version":3,"sources":["../../server/controllers/userController.js"],"names":["secret","process","env","SECRET","Users","req","res","data","body","password","hash","then","create","fullname","email","confirmPassword","role","status","send","message","user","catch","findOne","where","compare","err","response","token","sign","id","expiresIn"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAGA,IAAMA,SAASC,QAAQC,GAAR,CAAYC,MAA3B;;AAGA;;;;;AAKA;;IAEMC,K;;;;;;;;AACN;;;;;;;;;2BAUgBC,G,EAAKC,G,EAAK;AACtB,UAAMC,OAAOF,IAAIG,IAAJ,CAASC,QAAtB;;AAEA,uBAAOC,IAAP,CAAYH,IAAZ,EAAkB,EAAlB,EACGI,IADH,CACQ;AAAA,eAAQ,aAAKC,MAAL,CAAY;AACxBC,oBAAUR,IAAIG,IAAJ,CAASK,QADK;AAExBC,iBAAOT,IAAIG,IAAJ,CAASM,KAFQ;AAGxBL,oBAAUC,IAHc;AAIxBK,2BAAiBV,IAAIG,IAAJ,CAASO,eAJF;AAKxBC,gBAAMX,IAAIG,IAAJ,CAASQ;AALS,SAAZ,EAMXL,IANW,CAMN;AAAA,iBAAQL,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnCC,qBAAS,2BAD0B;AAEnCC,kBAAM;AACJP,wBAAUO,KAAKP,QADX;AAEJC,qBAAOM,KAAKN;AAFR;AAF6B,WAArB,CAAR;AAAA,SANM,EAaXO,KAbW,CAaL;AAAA,iBAASf,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,oBAAX,EAArB,CAAT;AAAA,SAbK,CAAR;AAAA,OADR;AAeD;AACD;;;;;;;;;;;0BASad,G,EAAKC,G,EAAK;AACrB,mBAAKgB,OAAL,CAAa;AACXC,eAAO;AACLT,iBAAOT,IAAIG,IAAJ,CAASM;AADX;AADI,OAAb,EAKGH,IALH,CAKQ,UAACS,IAAD,EAAU;AACd,YAAIA,IAAJ,EAAU;AACR,2BAAOI,OAAP,CAAenB,IAAIG,IAAJ,CAASC,QAAxB,EAAkCW,KAAKX,QAAvC,EAAiD,UAACgB,GAAD,EAAMC,QAAN,EAAmB;AAClE,gBAAIA,QAAJ,EAAc;AACZ,kBAAMC,QAAQ,uBAAIC,IAAJ,CAAS;AACrBC,oBAAIT,KAAKS,EADY;AAErBhB,0BAAUO,KAAKP,QAFM;AAGrBC,uBAAOM,KAAKN,KAHS;AAIrBE,sBAAMI,KAAKJ;AAJU,eAAT,EAKXhB,MALW,EAKH,EAAE8B,WAAW,MAAb,EALG,CAAd;AAMA,qBAAOxB,IACJW,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,sBAAoBC,KAAKN,KAAzB,MAAF,EAAqCD,UAAUO,KAAKP,QAApD,EAA8Dc,YAA9D,EAFD,CAAP;AAGD;AACD,mBAAOrB,IACJW,MADI,CACG,GADH,EAEJC,IAFI,CAEC,EAAEC,SAAS,6BAAX,EAFD,CAAP;AAGD,WAfD;AAgBD,SAjBD,MAiBO;AACLb,cACGW,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,EAAEC,SAAS,+BAAX,EAFR;AAGD;AACF,OA5BH;AA6BD;;;;;;kBAGYf,K","file":"userController.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport { User } from '../models';\r\n\r\n\r\nconst secret = process.env.SECRET;\r\n\r\n\r\n/**\r\n * @class User\r\n *@classdesc User Class\r\n */\r\n\r\n// const Secret = process.env.SECRET;\r\n\r\nclass Users {\r\n/**\r\n   * signUp\r\n   * @desc Registers a user to the application\r\n   * Route: POST: 'api/v1/users/signup'\r\n   * @param {Object} req request object\r\n   * @param {Object} res response object\r\n   * @returns {void}\r\n   */\r\n\r\n\r\n  static signup(req, res) {\r\n    const data = req.body.password;\r\n\r\n    bcrypt.hash(data, 10)\r\n      .then(hash => User.create({\r\n        fullname: req.body.fullname,\r\n        email: req.body.email,\r\n        password: hash,\r\n        confirmPassword: req.body.confirmPassword,\r\n        role: req.body.role\r\n      }).then(user => res.status(201).send({\r\n        message: 'User successfully created',\r\n        user: {\r\n          fullname: user.fullname,\r\n          email: user.email\r\n        }\r\n      }))\r\n        .catch(error => res.status(400).send({ message: 'email already used' })));\r\n  }\r\n  /**\r\n   * signIn\r\n   * @desc Login a user to the application\r\n   * Route: POST: 'api/v1/users/signin'\r\n   * @param {Object} req request object\r\n   * @param {Object} res response object\r\n   * @returns {void}\r\n   */\r\n\r\n  static login(req, res) {\r\n    User.findOne({\r\n      where: {\r\n        email: req.body.email\r\n      },\r\n    })\r\n      .then((user) => {\r\n        if (user) {\r\n          bcrypt.compare(req.body.password, user.password, (err, response) => {\r\n            if (response) {\r\n              const token = jwt.sign({\r\n                id: user.id,\r\n                fullname: user.fullname,\r\n                email: user.email,\r\n                role: user.role\r\n              }, secret, { expiresIn: '200h' });\r\n              return res\r\n                .status(200)\r\n                .send({ message: `Welcome ${user.email} `, fullname: user.fullname, token });\r\n            }\r\n            return res\r\n              .status(400)\r\n              .send({ message: 'email or password incorrect' });\r\n          });\r\n        } else {\r\n          res\r\n            .status(404)\r\n            .send({ message: 'No user with such information' });\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport default Users;\r\n"]}