{"version":3,"sources":["../../server/controllers/eventController.js"],"names":["config","Events","req","res","all","then","status","send","message","event","catch","error","findById","params","id","include","model","as","create","eventName","body","name","eventdate","date","time","purpose","centerId","parseInt","center","userId","user","findOne","where","update","err","destroy"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,iBAAOA,MAAP;;AAGA;;;;;IAKMC,M;;;;;;;;AACN;;;;;;;;;6BASkBC,G,EAAKC,G,EAAK;AACxB,oBAAMC,GAAN,GACGC,IADH,CACQ;AAAA,eAASF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,SAAX,EAAsBC,YAAtB,EAArB,CAAT;AAAA,OADR,EAEGC,KAFH,CAES;AAAA,eAASP,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,KAArB,CAAT;AAAA,OAFT;AAGD;;AAED;;;;;;;;;;;gCASmBT,G,EAAKC,G,EAAK;AAC3B,oBAAMS,QAAN,CAAeV,IAAIW,MAAJ,CAAWC,EAA1B,EAA8B;AAC5BC,iBAAS,CAAC,EAAEC,qBAAF,EAAiBC,IAAI,SAArB,EAAD;AADmB,OAA9B,EAGGZ,IAHH,CAGQ,UAACI,KAAD,EAAW;AACf,YAAIA,KAAJ,EAAW;AACTN,cAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,OAAX,EAAoBC,YAApB,EAArB;AACD,SAFD,MAEO;AACLN,cAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACD;AACF,OATH;AAUD;;AAGD;;;;;;;;;;;gCASmBN,G,EAAKC,G,EAAK;AAC3B,oBAAMe,MAAN,CAAa;AACXC,mBAAWjB,IAAIkB,IAAJ,CAASC,IADT;AAEXC,mBAAWpB,IAAIkB,IAAJ,CAASG,IAFT;AAGXC,cAAMtB,IAAIkB,IAAJ,CAASI,IAHJ;AAIXC,iBAASvB,IAAIkB,IAAJ,CAASK,OAJP;AAKXC,kBAAUC,SAASzB,IAAIkB,IAAJ,CAASQ,MAAlB,EAA0B,EAA1B,CALC;AAMXC,gBAAQ3B,IAAI4B,IAAJ,CAAShB;AANN,OAAb,EAQGT,IARH,CAQQ;AAAA,eAASF,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,sBAAX,EAAmCC,YAAnC,EAArB,CAAT;AAAA,OARR,EASGC,KATH,CASS;AAAA,eAASP,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,oBAAX,EAArB,CAAT;AAAA,OATT;AAUD;;AAED;;;;;;;;;;;8BASiBN,G,EAAKC,G,EAAK;AACzB,oBAAM4B,OAAN,CAAc,EAAEC,OAAO,EAAElB,IAAIZ,IAAIW,MAAJ,CAAWC,EAAjB,EAAT,EAAd,EACGT,IADH,CACQ,UAACI,KAAD,EAAW;AACf,YAAIA,KAAJ,EAAW;AACTA,gBAAMwB,MAAN,CAAa;AACXd,uBAAWjB,IAAIkB,IAAJ,CAASC,IADT;AAEXC,uBAAWpB,IAAIkB,IAAJ,CAASG,IAFT;AAGXC,kBAAMtB,IAAIkB,IAAJ,CAASI,IAHJ;AAIXC,qBAASvB,IAAIkB,IAAJ,CAASK,OAJP;AAKXC,sBAAUxB,IAAIkB,IAAJ,CAASQ;AALR,WAAb;AAOAzB,cAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,SAAX,EAAsBC,YAAtB,EAArB;AACD,SATD,MASO;AACLN,cAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACD;AACF,OAdH,EAeGE,KAfH,CAeS;AAAA,eAAOP,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB2B,GAArB,CAAP;AAAA,OAfT;AAgBD;;AAED;;;;;;;;;;;gCASmBhC,G,EAAKC,G,EAAK;AAC3B,oBAAM4B,OAAN,CAAc,EAAEC,OAAO,EAAElB,IAAIZ,IAAIW,MAAJ,CAAWC,EAAjB,EAAT,EAAd,EACGT,IADH,CACQ,UAACI,KAAD,EAAW;AACf,YAAIA,KAAJ,EAAW;AACTA,gBAAM0B,OAAN;AACAhC,cAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,6BAAX,EAArB;AACD,SAHD,MAGO;AACLL,cAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,iBAAX,EAArB;AACD;AACF,OARH,EASGE,KATH,CASS;AAAA,eAAOP,IAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB2B,GAArB,CAAP;AAAA,OATT;AAUD;;;;;;kBAGYjC,M","file":"eventController.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\nimport { Event, Center } from '../models';\r\n\r\ndotenv.config();\r\n\r\n\r\n/**\r\n * @class Event\r\n *@classdesc class Event\r\n */\r\n\r\nclass Events {\r\n/**\r\n   * get Events\r\n   * @desc Show a list of all the current events in the db\r\n   * Route: GET: 'api/v1/events'\r\n   * @param {Object} req request object\r\n   * @param {Object} res response object\r\n   * @returns {void}\r\n   */\r\n\r\n  static getEvent(req, res) {\r\n    Event.all()\r\n      .then(event => res.status(200).send({ message: 'success', event }))\r\n      .catch(error => res.status(200).send(error));\r\n  }\r\n\r\n  /**\r\n   * Get one Event\r\n   * @desc Return a single event based on the id number\r\n   * Route: GET: 'api/v1/events/<eventID>'\r\n   * @param {Object} req request object\r\n   * @param {Object} res response object\r\n   * @returns {void}\r\n   */\r\n\r\n  static getOneEvent(req, res) {\r\n    Event.findById(req.params.id, {\r\n      include: [{ model: Center, as: 'centers' }],\r\n    })\r\n      .then((event) => {\r\n        if (event) {\r\n          res.status(200).send({ message: 'Event', event });\r\n        } else {\r\n          res.status(400).send({ message: 'event not found' });\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * Add a new Event\r\n   * @desc Add a new Event\r\n   * Route: POST: 'api/v1/events'\r\n   * @param {Object} req request object\r\n   * @param {Object} res response object\r\n   * @returns {void}\r\n   */\r\n\r\n  static createEvent(req, res) {\r\n    Event.create({\r\n      eventName: req.body.name,\r\n      eventdate: req.body.date,\r\n      time: req.body.time,\r\n      purpose: req.body.purpose,\r\n      centerId: parseInt(req.body.center, 10),\r\n      userId: req.user.id\r\n    })\r\n      .then(event => res.status(201).send({ message: 'successfully created', event }))\r\n      .catch(error => res.status(400).send({ message: 'center not found!!' }));\r\n  }\r\n\r\n  /**\r\n   * Edit an already saved Event\r\n   * @desc Return a single event based on the id number\r\n   * Route: PUT: 'api/v1/events/<eventID>'\r\n   * @param {Object} req request object\r\n   * @param {Object} res response object\r\n   * @returns {void}\r\n   */\r\n\r\n  static editEvent(req, res) {\r\n    Event.findOne({ where: { id: req.params.id } })\r\n      .then((event) => {\r\n        if (event) {\r\n          event.update({\r\n            eventName: req.body.name,\r\n            eventdate: req.body.date,\r\n            time: req.body.time,\r\n            purpose: req.body.purpose,\r\n            centerId: req.body.center\r\n          });\r\n          res.status(200).send({ message: 'updated', event });\r\n        } else {\r\n          res.status(404).send({ message: 'event not found' });\r\n        }\r\n      })\r\n      .catch(err => res.status(400).send(err));\r\n  }\r\n\r\n  /**\r\n   * Delete Event\r\n   * @desc Deleter an event\r\n   * Route: DELETE: 'api/v1/events/<eventID>'\r\n   * @param {Object} req request object\r\n   * @param {Object} res response object\r\n   * @returns {void}\r\n   */\r\n\r\n  static deleteEvent(req, res) {\r\n    Event.findOne({ where: { id: req.params.id } })\r\n      .then((event) => {\r\n        if (event) {\r\n          event.destroy();\r\n          res.status(200).send({ message: 'Event successfully deleted!' });\r\n        } else {\r\n          res.status(404).send({ message: 'event not found' });\r\n        }\r\n      })\r\n      .catch(err => res.status(400).send(err));\r\n  }\r\n}\r\n\r\nexport default Events;\r\n\r\n"]}