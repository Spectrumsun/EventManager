{"version":3,"sources":["../../server/middleware/validator.js"],"names":["Validate","req","res","next","roles","user","role","process","env","ADMIN","status","json","messgae","findById","params","id","then","event","userId","send","message","sanitizeBody","checkBody","notEmpty","isEmail","normalizeEmail","remove_dots","remove_extension","gmail_remove_subaddress","equals","body","password","errors","validationErrors","Date","date","now","isNaN","time","match","center","findOne","where","centerId","eventdate","toISOString"],"mappings":"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","file":"validator.js","sourcesContent":["import { Event, Center } from '../models';\r\n\r\n\r\nclass Validate {\r\n  static validateAdmin(req, res, next) {\r\n    const roles = req.user.role;\r\n    if (roles != process.env.ADMIN) {\r\n      return res.status(400).json({ messgae: 'Only an admin can create centers' });\r\n    }\r\n    next();\r\n  }\r\n\r\n  static validateEventOwner(req, res, next) {\r\n    Event.findById(req.params.id)\r\n      .then((event) => {\r\n        const roles = req.user.id;\r\n        if (roles != event.userId) {\r\n          return res.json({ messgae: 'You are not owner of the event' });\r\n        }\r\n\r\n        if (!event) {\r\n          return res\r\n            .status(404)\r\n            .send({ message: 'Event Not Found' });\r\n        }\r\n      });\r\n    next();\r\n  }\r\n\r\n  static validateSigup(req, res, next) {\r\n    req.sanitizeBody('fullname');\r\n    req.checkBody('fullname', 'You must supply a name!').notEmpty();\r\n    req.checkBody('email', 'That Email is not valid!').isEmail();\r\n    req.sanitizeBody('email').normalizeEmail({ remove_dots: false, remove_extension: false, gmail_remove_subaddress: false });\r\n    req.checkBody('password', 'Password Cannot be Blank!').notEmpty();\r\n    req.checkBody('confirmPassword', 'Confirmed Password cannot be blank!').notEmpty();\r\n    req.checkBody('confirmPassword', 'Oops! Your passwords do not match').equals(req.body.password);\r\n\r\n    const errors = req.validationErrors();\r\n    if (errors) {\r\n      res.status(400).send({ message: 'Sigup errors', errors });\r\n      return; // stop the fn from running\r\n    }\r\n    next(); // there were no errors!\r\n  }\r\n\r\n  static validatelogin(req, res, next) {\r\n    req.sanitizeBody('fullname');\r\n    req.checkBody('email', 'That Email is not valid!').isEmail();\r\n    req.sanitizeBody('email').normalizeEmail({ remove_dots: false, remove_extension: false, gmail_remove_subaddress: false });\r\n    req.checkBody('password', 'Password Cannot be Blank!').notEmpty();\r\n\r\n    const errors = req.validationErrors();\r\n    if (errors) {\r\n      res.status(400).send({ message: 'login errors', errors });\r\n      return; // stop the fn from running\r\n    }\r\n    next(); // there were no errors!\r\n  }\r\n\r\n  static validateCreateEvent(req, res, next) {\r\n    req.checkBody('name', 'You must supply an Event  name!').notEmpty();\r\n    req.checkBody('date', 'You must supply a date !').notEmpty();\r\n    req.checkBody('time', 'You must supply a time!').notEmpty();\r\n    req.checkBody('purpose', 'You must supply a purpose !').notEmpty();\r\n    req.checkBody('center', 'You must pick a center!').notEmpty();\r\n\r\n    const errors = req.validationErrors();\r\n    if (errors) {\r\n      return res.status(400).send({ message: 'Errors adding new event', errors });\r\n    }\r\n    next();\r\n  }\r\n\r\n\r\n  static validateCreateCenter(req, res, next) {\r\n    req.checkBody('name', 'You must supply a Center  name!').notEmpty();\r\n    req.checkBody('city', 'You must supply a city !').notEmpty();\r\n    req.checkBody('address', 'You must supply a address!').notEmpty();\r\n\r\n    const errors = req.validationErrors();\r\n    if (errors) {\r\n      return res.status(400).send({ message: 'Error adding new Center', errors });\r\n      // stop the fn from running\r\n    }\r\n    next();\r\n  }\r\n\r\n\r\n  static checkDate(req, res, next) {\r\n    if ((new Date(req.body.date) - Date.now()) < 0) {\r\n  \t  return res.status(400).send({ message: 'You cant set a Past date for the event' });\r\n    }\r\n\r\n    if (isNaN(new Date(req.body.date))) {\r\n      return res.status(400).send({ message: 'invalid date format make sure it\\'s YYYY-MM-DD format' });\r\n    }\r\n\r\n    if (!req.body.time.match(/^([0-1]?[0-9]|2[0-3]):([0-5][0-9])?$/)) {\r\n      return res.status(400).send({ messgae: 'invalid time format make sure it\\'s HH:MM format 24 hours' });\r\n    }\r\n\r\n    if (isNaN(req.body.center)) {\r\n      return res.status(400).send({ messgae: 'Only Number allowed for Center' });\r\n    }\r\n\r\n\r\n    Event.findOne({\r\n      where: {\r\n        centerId: req.body.center,\r\n        eventdate: new Date(req.body.date).toISOString(),\r\n        // date: req.body.eventdate\r\n      }\r\n    }).then((event) => {\r\n      // console.log('-----',event.toJSON())\r\n      if (event && event.id != req.params.id) {\r\n        return res.status(409).send({ message: 'Center booked for that date already' });\r\n      }\r\n      next();\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport default Validate;\r\n"]}